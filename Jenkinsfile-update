library("tdr-jenkinslib")

pipeline {
  agent {
    ecs {
      inheritFrom "aws"
      taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeReadParamsRole${params.STAGE.capitalize()}"
    }
  }
  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "TDR environment where Keycloak configuration will be updated")
    choice(name: "UPDATE_POLICY", choices: ["SKIP", "FAIL"], description: "Action to be performed on existing Keycloak resources")
  }
  stages {
    stage("Get TDR realm configuration") {
      steps {
        sshagent(['github-jenkins']) {
          sh("git clone --branch master git@github.com:nationalarchives/tdr-configurations.git")
          sh("cp tdr-configurations/keycloak/tdr-realm-export.json .")
        }
      }
      post {
        always {
          sh("rm -rf tdr-configurations")
        }
      }
    }
    stage("Get SSM parameters values") {
      steps {
        script {
          account_number = tdr.getAccountNumberFromStage(params.STAGE)
          tdr_configuration_properties = sh(script: "python3 /ssm_get_parameter.py ${account_number} ${params.STAGE} /${params.STAGE}/keycloak/configuration_properties", returnStdout: true).trim()
          tdr_client_secret = sh(script: "python3 /ssm_get_parameter.py ${account_number} ${params.STAGE} /${params.STAGE}/keycloak/client/secret", returnStdout: true).trim()
          tdr_backend_checks_secret = sh(script: "python3 /ssm_get_parameter.py ${account_number} ${params.STAGE} /${params.STAGE}/keycloak/backend_checks_client/secret", returnStdout: true).trim()
          tdr_realm_admin_client_secret = sh(script: "python3 /ssm_get_parameter.py ${account_number} ${params.STAGE} /${params.STAGE}/keycloak/realm_admin_client/secret", returnStdout: true).trim()
          tdr_user_admin_client_secret = sh(script: "python3 /ssm_get_parameter.py ${account_number} ${params.STAGE} /${params.STAGE}/keycloak/user_admin_client/secret", returnStdout: true).trim()
        }
      }
    }
    stage("Import TDR realm configuration") {
      environment {
        CLIENT_SECRET = "${tdr_client_secret}"
        BACKEND_CHECKS_CLIENT_SECRET = "${tdr_backend_checks_secret}"
        REALM_ADMIN_CLIENT_SECRET = "${tdr_realm_admin_client_secret}"
        KEYCLOAK_CONFIGURATION_PROPERTIES = "${tdr_configuration_properties}"
        USER_ADMIN_CLIENT_SECRET = "${tdr_user_admin_client_secret}"
      }
      steps {
        sh "python3 update_tdr_realm.py ${params.STAGE} ${params.UPDATE_POLICY}"
      }
    }
  }
  post {
    success {
      script {
        tdr.postToDaTdrSlackChannel(
          colour: "good",
          message: "*Auth server* :arrow_up: The Keycloak auth app has been updated with latest configuration in the *${params.STAGE}* environment"
        )
        if (params.STAGE == "intg") {
          tdr.runEndToEndTests(0, params.STAGE, BUILD_URL)
        }
      }
    }
    failure {
      script {
        tdr.postToDaTdrSlackChannel(
          colour: "danger",
          message: " :warning: *Keycloak auth app configuration failed to update.\n *TDR Environment*: ${params.STAGE}\n" +
                   "*Update Job*: ${BUILD_URL}"
        )
      }
    }
  }
}
